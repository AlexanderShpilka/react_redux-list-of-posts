{"version":3,"sources":["constants/types.ts","utils/api.ts","constants/api.ts","utils/helpers.ts","store/root-reducer.ts","components/Search/Search.tsx","components/Button/Button.tsx","store/index.ts","index.tsx","components/App/App.tsx"],"names":["ActionType","initialState","inputValue","filterValue","isLoading","posts","isLoadSuccess","isLoadError","loadData","specificUrl","a","fetch","response","json","loadPosts","loadUsers","loadComments","getPosts","Promise","all","initialPosts","initialUsers","initialComments","map","post","user","find","id","userId","comments","filter","comment","postId","RootDispatcher","dispatch","setInputValue","type","SetInputValue","payload","setFilterValue","SetFilterValue","setIsLoading","SetIsLoading","setIsLoadSuccess","SetIsLoadSuccess","setIsLoadError","SetIsLoadError","console","log","LoadData","this","Search","useSelector","state","useDispatch","rootDispatcher","setFilterValueWithDebounce","useCallback","debounce","placeholder","value","onChange","event","target","Button","props","disabled","onClick","children","store","createStore","action","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","handleButtonClick","className","document","getElementById"],"mappings":"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","file":"static/js/main.2c63b59e.chunk.js","sourcesContent":["import { Action } from 'redux';\n\nexport interface InitialState {\n  inputValue: string;\n  filterValue: string;\n  isLoading: boolean;\n  posts: FullPost[];\n  isLoadSuccess: boolean;\n  isLoadError: boolean;\n}\n\nexport const initialState: InitialState = {\n  inputValue: '',\n  filterValue: '',\n  isLoading: false,\n  posts: [],\n  isLoadSuccess: false,\n  isLoadError: false,\n};\n\nexport enum ActionType {\n  SetInputValue,\n  SetFilterValue,\n  SetIsLoading,\n  LoadData,\n  SetIsLoadSuccess,\n  SetIsLoadError,\n}\n\nexport interface DispatchAction extends Action<ActionType> {\n  payload: Partial<InitialState>;\n}\n\nexport interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n\ninterface Geo {\n  lat: string;\n  lng: string;\n}\n\nexport interface Address {\n  street: string;\n  suite: string;\n  city: string;\n  zipcode: string;\n  geo: Geo;\n}\n\ninterface Company {\n  name: string;\n  catchPhrase: string;\n  bs: string;\n}\n\nexport interface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: Address;\n  phone: string;\n  website: string;\n  company: Company;\n}\n\nexport interface Comment {\n  postId: number;\n  id: number;\n  name: string;\n  email: string;\n  body: string;\n}\n\nexport interface FullPost extends Post {\n  user: User;\n  comments: Comment[];\n}\n","import { BASE_URL } from '../constants/api';\nimport { Post, User, Comment } from '../constants/types';\n\nconst loadData = async <T>(specificUrl: string): Promise<T[]> => {\n  const response = await fetch(`${BASE_URL}/${specificUrl}`);\n\n  return response.json();\n};\n\nexport const loadPosts = async (): Promise<Post[]> => {\n  return loadData<Post>('posts');\n};\n\nexport const loadUsers = async (): Promise<User[]> => {\n  return loadData<User>('users');\n};\n\nexport const loadComments = async (): Promise<Comment[]> => {\n  return loadData<Comment>('comments');\n};\n","export const BASE_URL = 'https://jsonplaceholder.typicode.com';\n","import { loadPosts, loadUsers, loadComments } from './api';\nimport { User, Post, Comment } from '../constants/types';\n\nexport const getPosts = async () => {\n  const [initialPosts, initialUsers, initialComments] = await Promise.all([\n    loadPosts(),\n    loadUsers(),\n    loadComments(),\n  ]);\n\n  const posts = initialPosts.map((post: Post) => {\n    return {\n      ...post,\n      user: initialUsers.find(\n        (user: User) => user.id === post.userId,\n      ) as User,\n      comments: initialComments.filter(\n        (comment: Comment) => comment.postId === post.id,\n      ),\n    };\n  });\n\n  return posts;\n};\n","import {\n  Reducer,\n  Dispatch,\n} from 'redux';\n\nimport {\n  ActionType,\n  InitialState,\n  DispatchAction,\n  initialState,\n} from '../constants/types';\n\nimport { getPosts } from '../utils/helpers';\n\nexport const rootReducer: Reducer<InitialState, DispatchAction> = (\n  state = initialState, action,\n) => {\n  switch (action.type) {\n    case ActionType.SetInputValue:\n      return {\n        ...state,\n        inputValue: action.payload.inputValue || '',\n      };\n    case ActionType.SetFilterValue:\n      return {\n        ...state,\n        filterValue: action.payload.filterValue || '',\n      };\n    case ActionType.SetIsLoading:\n      return {\n        ...state,\n        isLoading: action.payload.isLoading || false,\n      };\n    case ActionType.LoadData:\n      return {\n        ...state,\n        posts: action.payload.posts || [],\n      };\n    case ActionType.SetIsLoadSuccess:\n      return {\n        ...state,\n        isLoadSuccess: action.payload.isLoadSuccess || false,\n      };\n    case ActionType.SetIsLoadError:\n      return {\n        ...state,\n        isLoadError: action.payload.isLoadError || false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport class RootDispatcher {\n  private readonly dispatch: Dispatch<DispatchAction>;\n\n  constructor(dispatch: Dispatch<DispatchAction>) {\n    this.dispatch = dispatch;\n  }\n\n  setInputValue = (inputValue: string) => {\n    this.dispatch({\n      type: ActionType.SetInputValue,\n      payload: {\n        inputValue,\n      },\n    });\n  };\n\n  setFilterValue = (filterValue: string) => {\n    this.dispatch({\n      type: ActionType.SetFilterValue,\n      payload: {\n        filterValue,\n      },\n    });\n  };\n\n  setIsLoading = (isLoading: boolean) => {\n    return this.dispatch({\n      type: ActionType.SetIsLoading,\n      payload: {\n        isLoading,\n      },\n    });\n  };\n\n  setIsLoadSuccess = (isLoadSuccess: boolean) => {\n    return this.dispatch({\n      type: ActionType.SetIsLoadSuccess,\n      payload: {\n        isLoadSuccess,\n      },\n    });\n  };\n\n  setIsLoadError = (isLoadError: boolean) => {\n    return this.dispatch({\n      type: ActionType.SetIsLoadError,\n      payload: {\n        isLoadError,\n      },\n    });\n  };\n\n  loadData = () => {\n    console.log('Works here');\n\n    return async (dispatch: Dispatch) => {\n      console.log('Not working here');\n      dispatch(this.setIsLoading(true));\n\n      try {\n        const posts = await getPosts();\n\n        dispatch({\n          type: ActionType.LoadData,\n          payload: {\n            posts,\n          },\n        });\n\n        dispatch(this.setIsLoadSuccess(true));\n      } catch (error) {\n        dispatch(this.setIsLoadError(true));\n      } finally {\n        this.setIsLoading(false);\n      }\n    };\n  };\n}\n","import React, { FC, ChangeEvent, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport debounce from 'lodash/debounce';\n\nimport { InitialState } from '../../constants/types';\nimport { RootDispatcher } from '../../store/root-reducer';\n\nconst DEBOUNCE_TIMEOUT = 1000;\n\ninterface StateProps {\n  inputValue: string;\n}\n\n\nexport const Search: FC = () => {\n  const { inputValue } = useSelector<InitialState, StateProps>((state: InitialState) => ({\n    inputValue: state.inputValue,\n  }));\n\n  const dispatch = useDispatch();\n  const rootDispatcher = new RootDispatcher(dispatch);\n\n  const setFilterValueWithDebounce = useCallback(\n    debounce(rootDispatcher.setFilterValue, DEBOUNCE_TIMEOUT),\n    [],\n  );\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    rootDispatcher.setInputValue(event.target.value);\n    setFilterValueWithDebounce(event.target.value);\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Filter posts\"\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  disabled?: boolean;\n  onClick?(): void;\n}\n\n\nexport const Button: FC<Props> = (props) => {\n  const {\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  return (\n    <button\n      type=\"button\"\n      disabled={disabled}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { rootReducer } from './root-reducer';\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { App } from './components/App/App';\n\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","import React, { FC } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Search } from '../Search/Search';\nimport { Button } from '../Button/Button';\n\nimport { InitialState, FullPost } from '../../constants/types';\nimport { RootDispatcher } from '../../store/root-reducer';\nimport './App.css';\n\ninterface StateProps {\n  isLoading: boolean;\n  isLoadSuccess: boolean;\n  isLoadError: boolean;\n  posts: FullPost[];\n}\n\n\nexport const App: FC = () => {\n  const {\n    isLoading, isLoadSuccess, isLoadError, posts,\n  } = useSelector<InitialState, StateProps>((state: InitialState) => ({\n    isLoading: state.isLoading,\n    isLoadSuccess: state.isLoadSuccess,\n    isLoadError: state.isLoadError,\n    posts: state.posts,\n  }));\n\n  const dispatch = useDispatch();\n  const rootDispatcher = new RootDispatcher(dispatch);\n\n  const handleButtonClick = () => {\n    rootDispatcher.loadData();\n  };\n\n  const renderButton = () => {\n    if (isLoadSuccess) {\n      return null;\n    }\n\n    if (isLoading) {\n      return (\n        <Button disabled>\n          Loading...\n        </Button>\n      );\n    }\n\n    if (isLoadError) {\n      return (\n        <Button onClick={handleButtonClick}>\n          Try again\n        </Button>\n      );\n    }\n\n    return (\n      <Button onClick={handleButtonClick}>\n        Load Posts\n      </Button>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of posts</h1>\n      <hr />\n      <Search />\n\n      {renderButton()}\n      {isLoadSuccess ? (\n        posts.map(post => (\n          <li>\n            {post.id}\n          </li>\n        ))\n      ) : ''}\n    </div>\n  );\n};\n"],"sourceRoot":""}