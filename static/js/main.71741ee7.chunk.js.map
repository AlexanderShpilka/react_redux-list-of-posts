{"version":3,"sources":["constants/types.ts","utils/api.ts","constants/api.ts","utils/helpers.ts","store/actions.ts","components/Search/Search.tsx","components/Button/Button.tsx","components/User/User.tsx","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","store/index.ts","store/reducer.ts","index.tsx","App/App.tsx"],"names":["ActionType","initialState","inputValue","filterValue","isLoading","posts","isLoadSuccess","isLoadError","loadData","specificUrl","a","fetch","response","json","loadPosts","loadUsers","loadComments","getPosts","Promise","all","initialPosts","initialUsers","initialComments","map","post","user","find","id","userId","comments","filter","comment","postId","setIsLoading","type","SetIsLoading","payload","Search","useSelector","state","dispatch","useDispatch","dispatchWithDebounce","useCallback","debounce","value","placeholder","onChange","event","SetInputValue","setInputValue","target","SetFilterValue","Button","props","disabled","onClick","children","className","User","name","email","address","zipcode","street","city","Comment","body","CommentList","key","commentId","DeleteComment","Post","title","PostList","visiblePosts","useMemo","query","toLowerCase","includes","getVisiblePosts","DeletePost","store","createStore","action","LoadData","SetIsLoadSuccess","SetIsLoadError","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","handleButtonClick","document","getElementById"],"mappings":"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","file":"static/js/main.71741ee7.chunk.js","sourcesContent":["import { Action as ReduxAction } from 'redux';\n\nexport interface InitialState {\n  inputValue: string;\n  filterValue: string;\n  isLoading: boolean;\n  posts: FullPost[];\n  isLoadSuccess: boolean;\n  isLoadError: boolean;\n}\n\nexport const initialState: InitialState = {\n  inputValue: '',\n  filterValue: '',\n  isLoading: false,\n  posts: [],\n  isLoadSuccess: false,\n  isLoadError: false,\n};\n\nexport enum ActionType {\n  SetInputValue,\n  SetFilterValue,\n  SetIsLoading,\n  LoadData,\n  SetIsLoadSuccess,\n  SetIsLoadError,\n  DeletePost,\n  DeleteComment,\n}\n\ninterface SetInputValueAction extends ReduxAction {\n  type: ActionType.SetInputValue;\n  payload: string;\n}\n\ninterface SetFilterValueAction extends ReduxAction {\n  type: ActionType.SetFilterValue;\n  payload: string;\n}\n\ninterface SetIsLoadingAction extends ReduxAction {\n  type: ActionType.SetIsLoading;\n  payload: boolean;\n}\n\ninterface LoadDataAction extends ReduxAction {\n  type: ActionType.LoadData;\n  payload: FullPost[];\n}\n\ninterface SetIsLoadSuccessAction extends ReduxAction {\n  type: ActionType.SetIsLoadSuccess;\n  payload: boolean;\n}\n\ninterface SetIsLoadErrorAction extends ReduxAction {\n  type: ActionType.SetIsLoadError;\n  payload: boolean;\n}\n\ninterface DeletePostAction extends ReduxAction {\n  type: ActionType.DeletePost;\n  payload: number;\n}\n\ninterface DeleteCommentAction extends ReduxAction {\n  type: ActionType.DeleteComment;\n  payload: {\n    postId: number;\n    commentId: number;\n  };\n}\n\nexport type Action = (\n  SetInputValueAction\n  | SetFilterValueAction\n  | SetIsLoadingAction\n  | LoadDataAction\n  | SetIsLoadSuccessAction\n  | SetIsLoadErrorAction\n  | DeletePostAction\n  | DeleteCommentAction\n);\n\nexport interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n\ninterface Geo {\n  lat: string;\n  lng: string;\n}\n\nexport interface Address {\n  street: string;\n  suite: string;\n  city: string;\n  zipcode: string;\n  geo: Geo;\n}\n\ninterface Company {\n  name: string;\n  catchPhrase: string;\n  bs: string;\n}\n\nexport interface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: Address;\n  phone: string;\n  website: string;\n  company: Company;\n}\n\nexport interface Comment {\n  postId: number;\n  id: number;\n  name: string;\n  email: string;\n  body: string;\n}\n\nexport interface FullPost extends Post {\n  user: User;\n  comments: Comment[];\n}\n","import { BASE_URL } from '../constants/api';\nimport { Post, User, Comment } from '../constants/types';\n\nconst loadData = async <T>(specificUrl: string): Promise<T[]> => {\n  const response = await fetch(`${BASE_URL}/${specificUrl}`);\n\n  return response.json();\n};\n\nexport const loadPosts = async (): Promise<Post[]> => {\n  return loadData<Post>('posts');\n};\n\nexport const loadUsers = async (): Promise<User[]> => {\n  return loadData<User>('users');\n};\n\nexport const loadComments = async (): Promise<Comment[]> => {\n  return loadData<Comment>('comments');\n};\n","export const BASE_URL = 'https://jsonplaceholder.typicode.com';\n","import { loadPosts, loadUsers, loadComments } from './api';\nimport {\n  User,\n  Post,\n  Comment,\n  FullPost,\n} from '../constants/types';\n\nexport const getPosts = async () => {\n  const [initialPosts, initialUsers, initialComments] = await Promise.all([\n    loadPosts(),\n    loadUsers(),\n    loadComments(),\n  ]);\n\n  const posts = initialPosts.map((post: Post) => {\n    return {\n      ...post,\n      user: initialUsers.find(\n        (user: User) => user.id === post.userId,\n      ) as User,\n      comments: initialComments.filter(\n        (comment: Comment) => comment.postId === post.id,\n      ),\n    };\n  });\n\n  return posts;\n};\n\nexport const getVisiblePosts = (\n  posts: FullPost[],\n  query: string,\n): FullPost[] => {\n  return posts.filter(post => {\n    return (\n      post.title.toLowerCase().includes(query.toLowerCase())\n      || post.body.toLowerCase().includes(query.toLowerCase())\n    );\n  });\n};\n","import { Dispatch } from 'redux';\n\nimport { ActionType } from '../constants/types';\nimport { getPosts } from '../utils/helpers';\n\nexport const setInputValue = (inputValue: string) => ({\n  type: ActionType.SetInputValue,\n  payload: inputValue,\n});\n\nexport const setFilterValue = (filterValue: string) => ({\n  type: ActionType.SetFilterValue,\n  payload: filterValue,\n});\n\nexport const setIsLoading = (isLoading: boolean) => ({\n  type: ActionType.SetIsLoading,\n  payload: isLoading,\n});\n\nexport const setIsLoadSuccess = (isLoadSuccess: boolean) => ({\n  type: ActionType.SetIsLoadSuccess,\n  payload: isLoadSuccess,\n});\n\nexport const setIsLoadError = (isLoadError: boolean) => ({\n  type: ActionType.SetIsLoadError,\n  payload: isLoadError,\n});\n\nexport const loadData = () => {\n  return async (dispatch: Dispatch) => {\n    dispatch(setIsLoading(true));\n\n    try {\n      const posts = await getPosts();\n\n      dispatch({\n        type: ActionType.LoadData,\n        payload: posts,\n      });\n      dispatch(setIsLoadSuccess(true));\n    } catch (error) {\n      dispatch(setIsLoadError(true));\n    } finally {\n      dispatch(setIsLoading(false));\n    }\n  };\n};\n\nexport const deletePost = (id: number) => ({\n  type: ActionType.DeletePost,\n  payload: id,\n});\n\nexport const deleteComment = (postId: number, commentId: number) => ({\n  type: ActionType.DeleteComment,\n  payload: {\n    postId,\n    commentId,\n  },\n});\n","import React, { FC, ChangeEvent, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport debounce from 'lodash/debounce';\n\nimport {\n  setFilterValue,\n  setInputValue,\n} from '../../store/actions';\nimport { InitialState } from '../../constants/types';\n\nconst DEBOUNCE_TIMEOUT = 1000;\n\ninterface StateProps {\n  inputValue: string;\n}\n\n\nexport const Search: FC = () => {\n  const { inputValue } = useSelector<InitialState, StateProps>((state: InitialState) => ({\n    inputValue: state.inputValue,\n  }));\n\n  const dispatch = useDispatch();\n  const dispatchWithDebounce = useCallback(\n    debounce(dispatch, DEBOUNCE_TIMEOUT),\n    [],\n  );\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch(setInputValue(event.target.value));\n    dispatchWithDebounce(setFilterValue(event.target.value));\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={inputValue}\n        placeholder=\"Filter posts\"\n        onChange={handleInputChange}\n      />\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\nimport './Button.css';\n\ninterface Props {\n  disabled?: boolean;\n  onClick?(): void;\n}\n\n\nexport const Button: FC<Props> = (props) => {\n  const {\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  return (\n    <button\n      type=\"button\"\n      className=\"load-btn\"\n      disabled={disabled}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { User as UserInterface } from '../../constants/types';\nimport './User.css';\n\ninterface Props {\n  user: UserInterface;\n}\n\n\nexport const User: FC<Props> = (props) => {\n  const { user } = props;\n  const { name, email, address } = user;\n  const { zipcode, street, city } = address;\n\n  return (\n    <p className=\"user\">\n      <span>\n        <b>Name:</b>\n        {' '}\n        {name}\n      </span>\n      <span>\n        <b>Email:</b>\n        {' '}\n        {email}\n      </span>\n      <span>\n        <b>Address:</b>\n        {' '}\n        {`${city} / ${street} / ${zipcode}`}\n      </span>\n    </p>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { Comment as CommentInterface } from '../../constants/types';\n\ninterface Props {\n  comment: CommentInterface;\n}\n\n\nexport const Comment: FC<Props> = (props) => {\n  const { comment } = props;\n\n  return (\n    <>\n      {comment.body}\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { Comment as CommentComponent } from '../Comment';\n\nimport { Comment } from '../../constants/types';\nimport { deleteComment } from '../../store/actions';\n\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentList: FC<Props> = (props) => {\n  const { comments } = props;\n\n  const dispatch = useDispatch();\n\n  return (\n    <ol>\n      {comments.map(comment => (\n        <li key={comment.id}>\n          <CommentComponent comment={comment} />\n          {' '}\n          <button\n            type=\"button\"\n            onClick={() => {\n              dispatch(deleteComment(comment.postId, comment.id));\n            }}\n          >\n            X\n          </button>\n        </li>\n      ))}\n    </ol>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { User } from '../User';\nimport { CommentList } from '../CommentList';\n\nimport { FullPost } from '../../constants/types';\n\ninterface Props {\n  post: FullPost;\n}\n\n\nexport const Post: FC<Props> = (props) => {\n  const { post } = props;\n  const {\n    title,\n    body,\n    user,\n    comments,\n  } = post;\n\n  return (\n    <>\n      <p>\n        <b>Title:</b>\n        {' '}\n        {title}\n      </p>\n      <p>\n        <b>Body:</b>\n        {' '}\n        {body}\n      </p>\n      <User user={user} />\n      <CommentList comments={comments} />\n    </>\n  );\n};\n","import React, { FC, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Post } from '../Post';\n\nimport { getVisiblePosts } from '../../utils/helpers';\nimport { InitialState, FullPost } from '../../constants/types';\nimport { deletePost } from '../../store/actions';\nimport './PostList.css';\n\ninterface StateProps {\n  posts: FullPost[];\n  filterValue: string;\n}\n\n\nexport const PostList: FC = () => {\n  const { posts, filterValue } = useSelector<InitialState, StateProps>((state: InitialState) => ({\n    posts: state.posts,\n    filterValue: state.filterValue,\n  }));\n\n  const dispatch = useDispatch();\n\n  const visiblePosts = useMemo(\n    () => getVisiblePosts(posts, filterValue),\n    [posts, filterValue],\n  );\n\n  return (\n    <ul className=\"post-list\">\n      {visiblePosts.map(post => (\n        <li\n          key={post.id}\n          className=\"post-item\"\n        >\n          <Post post={post} />\n          <button\n            type=\"button\"\n            className=\"delete-item-btn\"\n            onClick={() => {\n              dispatch(deletePost(post.id));\n            }}\n          >\n            X\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { reducer } from './reducer';\n\nexport const store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n","import { Reducer } from 'redux';\n\nimport {\n  ActionType,\n  InitialState,\n  Action,\n  initialState,\n} from '../constants/types';\n\n\nexport const reducer: Reducer<InitialState, Action> = (\n  state = initialState, action,\n) => {\n  switch (action.type) {\n    case ActionType.SetInputValue:\n      return {\n        ...state,\n        inputValue: action.payload || '',\n      };\n    case ActionType.SetFilterValue:\n      return {\n        ...state,\n        filterValue: action.payload || '',\n      };\n    case ActionType.SetIsLoading:\n      return {\n        ...state,\n        isLoading: action.payload || false,\n      };\n    case ActionType.LoadData:\n      return {\n        ...state,\n        posts: action.payload || [],\n      };\n    case ActionType.SetIsLoadSuccess:\n      return {\n        ...state,\n        isLoadSuccess: action.payload || false,\n      };\n    case ActionType.SetIsLoadError:\n      return {\n        ...state,\n        isLoadError: action.payload || false,\n      };\n    case ActionType.DeletePost:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post.id !== action.payload),\n      };\n    case ActionType.DeleteComment:\n      return {\n        ...state,\n        posts: state.posts.map(post => {\n          if (post.id !== action.payload.postId) {\n            return post;\n          }\n\n          return {\n            ...post,\n            comments: post.comments.filter(comment => comment.id !== action.payload.commentId),\n          };\n        }),\n      };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { App } from './App';\n\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","import React, { FC } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Search } from '../components/Search';\nimport { Button } from '../components/Button';\nimport { PostList } from '../components/PostList';\n\nimport { loadData } from '../store/actions';\nimport { InitialState } from '../constants/types';\nimport './App.css';\n\ninterface StateProps {\n  isLoading: boolean;\n  isLoadSuccess: boolean;\n  isLoadError: boolean;\n}\n\n\nexport const App: FC = () => {\n  const {\n    isLoading, isLoadSuccess, isLoadError,\n  } = useSelector<InitialState, StateProps>((state: InitialState) => ({\n    isLoading: state.isLoading,\n    isLoadSuccess: state.isLoadSuccess,\n    isLoadError: state.isLoadError,\n  }));\n\n  const dispatch = useDispatch();\n\n  const handleButtonClick = () => {\n    dispatch(loadData());\n  };\n\n  const renderButton = () => {\n    if (isLoadSuccess) {\n      return null;\n    }\n\n    if (isLoading) {\n      return (\n        <Button disabled>\n          Loading...\n        </Button>\n      );\n    }\n\n    if (isLoadError) {\n      return (\n        <Button onClick={handleButtonClick}>\n          Try again\n        </Button>\n      );\n    }\n\n    return (\n      <Button onClick={handleButtonClick}>\n        Load Posts\n      </Button>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of posts</h1>\n      <hr />\n      <Search />\n\n      {renderButton()}\n\n      {isLoadSuccess && <PostList />}\n    </div>\n  );\n};\n"],"sourceRoot":""}